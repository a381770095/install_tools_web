安装docker
uname -r 查看内核版本,docker要安装在3.1版本以上

yum update 更新yum
卸载旧版本
yum remove docker  docker-common docker-selinux docker-engine
先安装以下包
yum install -y yum-utils device-mapper-persistent-data lvm2
设置yum源
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
查看所有仓库中的docker版本
yum list docker-ce --showduplicates | sort -r
安装docker
yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0
yum install <FQPN>  # 例如：sudo yum install docker-ce-17.12.0.ce
启动并加入开机启动
systemctl start docker
systemctl enable docker
重启
systemctl restart docker
验证是否安装成功
docker version
登入
docker login
删除所有容器
docker rm 'docker ps -a -q'
删除所有镜像
docker rm 'docker images -q'

image 镜像
container 容器 镜像运行起来后的执行单位

镜像操作
docker pull image:版本号
例如：
docker pull python 拉取最新版本
docker pull python:3.6

docker images 查看镜像
docker search python 查找镜像
docker rmi 镜像名字/ID  删除镜像
docker rm ID  删除容器
docker run -di --name=centos centos:7  把镜像启动为容器
docker stop 容器名字/ID  停止容器
docker ps 查看运行中的容器
docker ps -a 查看容器包括停止的容器
docker info 查看信息
docker start 容器ID  启动容器

配置docker源
vi /etc/docker/daemon.json
添加
{
"registry-mirrors":["https://docker.mirrors.ustc.edu.cn"]
}

容器的创建和启动
docker create --name=redis redis 创建容器
docker create --name=redis redis ps -A  创建容器并预设命令 ps -A ,启动融容器时执行

docker run 参数
                    -i  运行容器
                    -t  进入容器
                    -d  后台运行容器
                    -v 目录映射（前宿主机后容器）可以使用多个-v
                    -p 端口映射（前宿主机后容器） 可以使用多个-p


终端链接容器
docker exec -it 容器ID  /bin/bash
exit 退出

文件拷贝
宿主机拷贝到容器
docker cp 宿主机目录 容器:容器目录
容器拷贝到宿主机
docker cp 容器:容器目录 宿主机目录


目录挂载
docker run -di --name=centos -v /home:/home centos:7
端口映射
docker run -di --name=redis -p 6378:6379 redis


docker inspect 容器ID 查看容器接口信息
查看容器ip
docker inspect --format='{{.NetworkSettings.IPAddress}}' redis

docker部署mysql
docker run --name=mysql -v /my/own/datadir:/var/lib/mysql -e 
MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag

容器保存为镜像
docker commit 容器名 镜像名字
镜像备份
docker save -o name.tar 镜像名字
tar包恢复为镜像
docker load -i name.tar
查看容器运行日志
docker logs 容器



dockerfile 构建镜像
vim dockerfile 内容如下:
FROM: python:3.6
MAINTAINER:
EXPOSE:
ADD:
RUN:
VOLUME:
CMD:
...
通过dockerfile构建镜像
docker build -t='imagename'

dockerfile部署项目
在项目根目录创建一个dockerfile文件

nginx配置
创建目录
mkdir -p nginx/conf nginx/html nginx/logs
创建配置文件
vim nginx/conf/nginx.conf
写入
worker_processes 1;
events {
    worker_connections 1024;
}
http {
    include        mime.types;
    default_type    application/octet-stream;
    sendfile           on;
    keepalive_timeout     65;
    # 负载均衡配置
    upstream    node    {
        server     101.100.123.11:8080;
        server      101.100.123.11:8081;
        }
    server    {
          listen    80;
          server_name    localhost;
          location    /   {
                 #方式一
                 #方式二
                 #方式三
                 proxy_pass   http://100.123.122.11.8080;
                 #负载均衡配置
                 proxy_pass   http://node;
                      }
         error_page    500 502 503 504 /50x.html  {
                 root     html;
         }
    }
}


搭建本地私有仓库
docker pull registry
运行私有仓库
docker run -id --name registrp -p 5000:5000 registry
启动后访问
http://192.168.45.100:5000/v2/_catalog
修改daemone.json
vim /etc/docker/daemon.json
{"insecure-registries":["192.168.45.100:5000"]}
重启docker
systemctl restart docker
重启仓库
systemctl start registry
打标签
docker tag hello-world 192.168.45.100:5000/hello-world
上传镜像到私有仓库
docker push 192.168.45.100:5000/hello-world
从私有仓库下载镜像
docker pull 192.168.45.100:5000/hello-world


docker-compose单机情况下容器编排工具

































